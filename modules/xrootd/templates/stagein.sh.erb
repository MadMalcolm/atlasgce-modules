#!/usr/bin/env sh

#
#  Note this script expects 2 input parameters
#
#  1 - xrootd source file name
#  2 - xrootd dest file name
#  3 - xrootd cluster ID

log()
{
  echo "LOG: $1"
  echo $1 >> $logfile
}

# create logfile
logfile=$(mktemp -q /tmp/$(basename $0).log.XXXXXX)
if [ $? -ne 0 ]
then
  echo "Can't create log file"
  exit 1
fi

if [ $# -ne 3 ]
then
  log "Incorrect number of parameters. Got $#, expected 3. ($*)"
  exit 85
fi

xrdport=1094

glrd=<%= @global_redirector %>:<%= @xrdport %>
local_svr=$(hostname):<%= @xrdport %>

src=$1
dst=$2
cid=$3

remote_uri="root://${glrd}/${src}?tried=+${cid}"
#target_uri="root://${local_svr}/${local_dest}"

log "Initializing stage-in: $0 - $(date)"
log "src: $src"
log "dst: $dst"
log "remote_uri: $remote_uri"
#log "target_uri: $target_uri"

# Check if the file exists within the federation
lookup=$(xrd $glrd locatesingle $src | grep Location | sed "s/.*'\(.*\)'/\1/")

if [ $lookup = "" ]
then
  log "Failed to locate $src through $glrd"
  mv -fv $logfile ${dst}.fail
  exit 2
fi

# Get the file via xrdcp
log "Running command: xrdcp -d 1 -f -s ${remote_uri} ${dst}"
xrdcp -d 1 -f -s $remote_uri $dst 2>&1 | tee -a $logfile
if [ $? -ne 0 ]
then
  log "Failed to download $remote_uri"
  mv -fv $logfile ${dst}.fail
  exit 5
fi

# TODO: Add xrdadler32 check; break if checksums are not equal. (If
# necessary.)

#log "xrdadler32 $local_dest"
#xrdadler32 $local_dest | tee -a $logfile
#
#log "xrdadler32 $remote_uri"
#xrdadler32 $remote_uri | tee -a $logfile

#rm -f $logfile

exit 0
